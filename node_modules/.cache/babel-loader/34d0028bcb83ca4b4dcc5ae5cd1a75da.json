{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/Projects/react-memory-game/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport SingleCard from './components/SingleCard';\nimport img1 from \"./img/helmet-1.png\";\nimport img2 from \"./img/potion-1.png\";\nimport img3 from \"./img/ring-1.png\";\nimport img4 from \"./img/scroll-1.png\";\nimport img5 from \"./img/shield-1.png\";\nimport img6 from \"./img/sword-1.png\"; // array of card images\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardImages = [{\n  \"src\": img1,\n  matched: false\n}, {\n  \"src\": img2,\n  matched: false\n}, {\n  \"src\": img3,\n  matched: false\n}, {\n  \"src\": img4,\n  matched: false\n}, {\n  \"src\": img5,\n  matched: false\n}, {\n  \"src\": img6,\n  matched: false\n}];\n\nfunction App() {\n  _s();\n\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n  const [disabled, setDisabled] = useState(false); // shuffle cards, duplicate cards to get set of 12, assign random ID to each\n\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages] // 2 lots of card images\n    .sort(() => Math.random() - 0.5) // shuffled array\n    .map(card => ({ ...card,\n      id: Math.random()\n    })); // add on random ID number to each card\n\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setCards(shuffledCards);\n    setTurns(0);\n  }; // handle a user choice, update choice one or two\n\n\n  const handleChoice = card => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card); // if choiceOne is null (is false), update with setChoiceOne, else update choiceTwo with setChoiceTwo\n  }; // reset game automagically\n\n\n  useEffect(() => {\n    shuffleCards();\n  }, []); // compare two selected cards\n\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      setDisabled(true);\n\n      if (choiceOne.src === choiceTwo.src) {\n        setCards(prevCards => {\n          return prevCards.map(card => {\n            if (card.src === choiceOne.src) {\n              return { ...card,\n                matched: true\n              };\n            } else {\n              return card;\n            }\n          });\n        });\n        resetTurn();\n      } else {\n        setTimeout(() => resetTurn(), 1000);\n      }\n    }\n  }, [choiceOne, choiceTwo]); // reset choices and increase number of turns\n\n  const resetTurn = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns(prevTurns => prevTurns + 1);\n    setDisabled(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Magic Match\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"A card memory game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: shuffleCards,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Turns: \", turns]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-grid\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(SingleCard, {\n        card: card,\n        handleChoice: handleChoice,\n        cardFlipped: card === choiceOne || card === choiceTwo || card.matched,\n        disabled: disabled\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"zpj1OC3lPd52QG2dCYHCz30icbw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/user/Desktop/Projects/react-memory-game/src/App.js"],"names":["useEffect","useState","SingleCard","img1","img2","img3","img4","img5","img6","cardImages","matched","App","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","disabled","setDisabled","shuffleCards","shuffledCards","sort","Math","random","map","card","id","handleChoice","src","prevCards","resetTurn","setTimeout","prevTurns"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAO,WAAP;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,IAAP,MAAiB,mBAAjB,C,CAEA;;;AACA,MAAMC,UAAU,GAAG,CACjB;AAAE,SAAON,IAAT;AAAeO,EAAAA,OAAO,EAAE;AAAxB,CADiB,EAEjB;AAAE,SAAON,IAAT;AAAeM,EAAAA,OAAO,EAAE;AAAxB,CAFiB,EAGjB;AAAE,SAAOL,IAAT;AAAeK,EAAAA,OAAO,EAAE;AAAxB,CAHiB,EAIjB;AAAE,SAAOJ,IAAT;AAAeI,EAAAA,OAAO,EAAE;AAAxB,CAJiB,EAKjB;AAAE,SAAOH,IAAT;AAAeG,EAAAA,OAAO,EAAE;AAAxB,CALiB,EAMjB;AAAE,SAAOF,IAAT;AAAeE,EAAAA,OAAO,EAAE;AAAxB,CANiB,CAAnB;;AASA,SAASC,GAAT,GAAe;AAAA;;AAEb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACa,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAAC,CAAD,CAAlC;AACA,QAAM,CAACe,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACiB,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAM,CAACmB,QAAD,EAAWC,WAAX,IAA0BpB,QAAQ,CAAC,KAAD,CAAxC,CANa,CAQb;;AACA,QAAMqB,YAAY,GAAG,MAAM;AACzB,UAAMC,aAAa,GAAG,CAAC,GAAGd,UAAJ,EAAgB,GAAGA,UAAnB,EAAoC;AAApC,KACnBe,IADmB,CACd,MAAMC,IAAI,CAACC,MAAL,KAAgB,GADR,EACoC;AADpC,KAEnBC,GAFmB,CAEdC,IAAD,KAAW,EAAE,GAAGA,IAAL;AAAWC,MAAAA,EAAE,EAAEJ,IAAI,CAACC,MAAL;AAAf,KAAX,CAFe,CAAtB,CADyB,CAGiC;;AAE1DT,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAN,IAAAA,QAAQ,CAACU,aAAD,CAAR;AACAR,IAAAA,QAAQ,CAAC,CAAD,CAAR;AACD,GATD,CATa,CAoBb;;;AACA,QAAMe,YAAY,GAAIF,IAAD,IAAU;AAC7BZ,IAAAA,SAAS,GAAGG,YAAY,CAACS,IAAD,CAAf,GAAwBX,YAAY,CAACW,IAAD,CAA7C,CAD6B,CAC8B;AAC5D,GAFD,CArBa,CAyBb;;;AACA5B,EAAAA,SAAS,CAAC,MAAM;AACdsB,IAAAA,YAAY;AACb,GAFQ,EAEN,EAFM,CAAT,CA1Ba,CA8Bb;;AACAtB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIgB,SAAS,IAAIE,SAAjB,EAA4B;AAC1BG,MAAAA,WAAW,CAAC,IAAD,CAAX;;AACA,UAAIL,SAAS,CAACe,GAAV,KAAkBb,SAAS,CAACa,GAAhC,EAAqC;AACnClB,QAAAA,QAAQ,CAACmB,SAAS,IAAI;AACpB,iBAAOA,SAAS,CAACL,GAAV,CAAeC,IAAD,IAAU;AAC7B,gBAAIA,IAAI,CAACG,GAAL,KAAaf,SAAS,CAACe,GAA3B,EAAgC;AAC9B,qBAAO,EAAE,GAAGH,IAAL;AAAWlB,gBAAAA,OAAO,EAAE;AAApB,eAAP;AACD,aAFD,MAEO;AACL,qBAAOkB,IAAP;AACD;AACF,WANM,CAAP;AAOD,SARO,CAAR;AASAK,QAAAA,SAAS;AACV,OAXD,MAWO;AACLC,QAAAA,UAAU,CAAC,MAAMD,SAAS,EAAhB,EAAoB,IAApB,CAAV;AACD;AACF;AACF,GAlBQ,EAkBN,CAACjB,SAAD,EAAYE,SAAZ,CAlBM,CAAT,CA/Ba,CAmDb;;AACA,QAAMe,SAAS,GAAG,MAAM;AACtBhB,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAJ,IAAAA,QAAQ,CAACoB,SAAS,IAAIA,SAAS,GAAG,CAA1B,CAAR;AACAd,IAAAA,WAAW,CAAC,KAAD,CAAX;AACD,GALD;;AAOA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAQ,MAAA,OAAO,EAAEC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAA,4BAAWR,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,gBACGF,KAAK,CAACe,GAAN,CAAWC,IAAD,iBACT,QAAC,UAAD;AAEE,QAAA,IAAI,EAAEA,IAFR;AAGE,QAAA,YAAY,EAAEE,YAHhB;AAIE,QAAA,WAAW,EAAEF,IAAI,KAAKZ,SAAT,IAAsBY,IAAI,KAAKV,SAA/B,IAA4CU,IAAI,CAAClB,OAJhE;AAKE,QAAA,QAAQ,EAAEU;AALZ,SACOQ,IAAI,CAACC,EADZ;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD;;GA9EQlB,G;;KAAAA,G;AAgFT,eAAeA,GAAf","sourcesContent":["import { useEffect, useState } from 'react';\nimport './App.css';\nimport SingleCard from './components/SingleCard';\nimport img1 from \"./img/helmet-1.png\";\nimport img2 from \"./img/potion-1.png\"\nimport img3 from \"./img/ring-1.png\"\nimport img4 from \"./img/scroll-1.png\"\nimport img5 from \"./img/shield-1.png\"\nimport img6 from \"./img/sword-1.png\"\n\n// array of card images\nconst cardImages = [\n  { \"src\": img1, matched: false },\n  { \"src\": img2, matched: false },\n  { \"src\": img3, matched: false },\n  { \"src\": img4, matched: false },\n  { \"src\": img5, matched: false },\n  { \"src\": img6, matched: false },\n]\n\nfunction App() {\n\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n  const [disabled, setDisabled] = useState(false);\n\n  // shuffle cards, duplicate cards to get set of 12, assign random ID to each\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages]      // 2 lots of card images\n      .sort(() => Math.random() - 0.5)                        // shuffled array\n      .map((card) => ({ ...card, id: Math.random() }))        // add on random ID number to each card\n\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setCards(shuffledCards);\n    setTurns(0);\n  }\n\n  // handle a user choice, update choice one or two\n  const handleChoice = (card) => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card)        // if choiceOne is null (is false), update with setChoiceOne, else update choiceTwo with setChoiceTwo\n  }\n\n  // reset game automagically\n  useEffect(() => {\n    shuffleCards()\n  }, [])\n\n  // compare two selected cards\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      setDisabled(true);\n      if (choiceOne.src === choiceTwo.src) {\n        setCards(prevCards => {\n          return prevCards.map((card) => {\n            if (card.src === choiceOne.src) {\n              return { ...card, matched: true }\n            } else {\n              return card;\n            }\n          })\n        })\n        resetTurn();\n      } else {\n        setTimeout(() => resetTurn(), 1000);\n      }\n    }\n  }, [choiceOne, choiceTwo])\n\n  // reset choices and increase number of turns\n  const resetTurn = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns(prevTurns => prevTurns + 1);\n    setDisabled(false);\n  }\n\n  return (\n    <div className=\"App\">\n      <h2>Magic Match</h2>\n      <h5>A card memory game</h5>\n      <button onClick={shuffleCards}>New Game</button>\n      <p>Turns: {turns}</p>\n      <div className=\"card-grid\">\n        {cards.map((card) => (\n          <SingleCard\n            key={card.id}\n            card={card}\n            handleChoice={handleChoice}\n            cardFlipped={card === choiceOne || card === choiceTwo || card.matched}\n            disabled={disabled}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}